AZ-400 

Orientation : 29th Mar. 2025 (1Hr.)

Start Date : 5th April 2025 (3 Hrs. 8:30PM IST - 11:30PM IST)

#######################
Day 1 : 5th April 2025
#######################

Agenda: 
	Introduction to DevOps 
	Introduction to Azure DevOps Service 
	
	Lab : Azure Free Tier Account 
	
Pre-requisities :
	Good to have Linux fundamentals
	


Introduction to DevOps :::

	What is DevOps?
	

	Software / Applications :
	
		- Desktop Applications
		- Web Applications 
		- Mobile Applications
		- Embedded Applications ( IoT)
		
	SDLC : Software Development Life Cycle:
	
	- Requirement Analysis 
	- Design & Documentation
	- Code / Develop
	- Test 
	- Implement to Production 
	- Maintain / Monitor
	
	Waterfall Model :
	
		- Top-Down Approach - Linear fashion
		- Monolith Application Architecture
		
		- Desktop Applications ::
		
			--> Retail Customer : Super-Market - Billing & Sales Management
									-> User Interface 
									-> Stock Mgmt
									-> Billing 
									-> Payment : CASH 
										--> Online/CASH/UPI/CARD
									-> Inventory Mgmt
				
		Core Project :
		
		- Requirement Analysis 			18-Months 
		- Design & Documentation
		- Code / Develop				7th Month 
		- Test 
		- Implement to Production 
		- Maintain / Monitor
		
		Enhancement Project : --> Online/CASH/UPI/CARD
		
		- Requirement Analysis 		
		- Design & Documentation	
		- Code / Develop			
		- Test 	
		- Implement to Production 	
		- Maintain / Monitor	

	
	AGILE Methodologies :
	
		- Based on Iterations:
			- Functions/Modules ==> Iterations
			
			
	Iteration1: User Interface design
	
		- Requirement Analysis 		
		- Design & Documentation	
		- Code / Develop			
		- Test 	
		- Implement to Production with manual approvals	
		
		- Maintain / Monitor	
	
	Iteration2: Stock Mgmt
	
		- Requirement Analysis 		
		- Design & Documentation	
		- Code / Develop			
		- Test 	
		- Implement to Production with manual approvals	 
		
		- Maintain / Monitor	
	
	
	Iteration nth: Online/CASH/UPI/CARD
	
		- Requirement Analysis 		
		- Design & Documentation	
		- Code / Develop			
		- Test 	
		- Implement to Production with manual approvals	 
		
		- Maintain / Monitor
		
	
	Using AGILE Methodologies :
	
		We can able to achieve :
		
			- Continuous Development
			- Continuous Integration 
			- Continuous Testing 
			- Continuous Delivery 
				- It used to release the product/changes to production Environment
				- It expect the Manual Approvals.
			
		We cannot achieve :
		
			- Continuous Deployment
				- It used to release the product/changes to production Environment
				- It never expect the Manual Approvals.			
	
	What is DevOps? 
	
		DevOps is a Software Development Strategy, which promote the collaboration between the teams like Development Team and Operations Teams to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Monitoring in more automated fashion.
		
	How to Implement DevOps?
	
	Identify the Teams involved in SDLC Process :
		
		- Infra-Structure Management Team 
		- Application Development Team 			Appln. Module 
		- Testing Team
		- Release Management Team 
		- Production Support Team 
		- Production Monitoring Team 
		- IT Security Management Team 
		
	Environments:
	
		Non-Prod Environments									Production Environments
		
			Dev Environment
			
			Build Environment
			
			Test Environments
				- QA 
				
				- UAT 					=============>				Production Servers 		
			
	Application Architecture :	
	
		- Monolith Application Architecture
			- The Application components are tightly coupled with each other.
			- It is not possible to independently implement the changes to prod.
			- Here all the functions are defined on a single Application Routine.
			- With this we can just achieve Continuous Delivery		
		
		- Micro-Service Based Application Architecture
		
			- The Entire Application is divided into Micro-Services 
			- Each Micro-Service can be independently developed and implement to prod.
			- With this we can achieve Continuous Deployment
			
			
		Web Application :
		
		sign-up
		
		sign-in 
		
		
	DevOps Stages :
	
		- Continuous Development :
		
			- It is capability of Application Team to Continuously develop the code changes for further implementation.
			- It aims to improve the Developers' productivity.
			
			Role of Application Developer :
			
				- To Create Application Source Code.
				
				- Create Source Code 
				- Manual Build (Is a process of Compiling the Source Code & Create Artifacts(Binaries - *.war/*.jar/*.dll/*.exec))
				- Unit Testing 
				- Promote the Changes to Test Environment
				- Manually send the Email Notifications to Testing Teams
			
			Using DevOps Approach :

				- Create Source Codes 
				- Save/Commit the Source Codes in the Source Code Repository(GitHub/Azure Repo)
				
				Automate :
			
				- Build (Is a process of Compiling the Source Code & Create Artifacts(Binaries - *.war/*.jar/*.dll/*.exec))
				- Unit Testing 
				- Promote the Changes to Test Environment
				- Send the Email Notifications to Testing Teams		

			Tools: 
				- IDEs - Eclipse/Pycharm/Eclipse Based IDEs - Visual Studio Code / Visual Studio
				- Git/GitHub/Azure Repo
				
		
		- Continuous Integration::

			- It is capability of Application Team to Continuously Integrate the code changes for further testing.

				Automate :
			
				- Build (Is a process of Compiling the Source Code & Create Artifacts(Binaries - *.war/*.jar/*.dll/*.exec))
				- Unit Testing 
				- Promote the Changes to Test Environment
				- Send the Email Notifications to Testing Teams	
				
			Tools :
			
				- IDEs - Eclipse/Pycharm/Eclipse Based IDEs - Visual Studio Code / Visual Studio
				- Git/GitHub/Azure Repo
				- Jenkins / Azure Pipelines / Docker / Kubernetes / Ansible 

				
		- Continuous Testing::

			- It is capability of Testing Team to Continuously Test the code changes for further Implementation.
			
			Tools :
			
				- Junit/TestNG/Selenium
				- Jenkins/Azure Pipelines/Azure Artifacts/Azure Test 
				

		- Continuous Delivery / Deployment::

			- Both Continuous Delivery & Continuous Deployment are used to promote the changes to Production Environments.

			- Continuous Delivery :
			
				- It expect the Manual Approvals for Production Releases.
				- Expect Application Down-Time.

				Eg.:
				
					Online Banking : v1.0 ==> v2.0
					
						Open Production Release Window : 
						
							4 - 6 Hrs. (Application Downtime) - 
							
							Prod Testing ==> Fix the issue else revert the changes

						
			- Continuous Deployment :
			
				- It never expect the Manual Approvals for Production Releases.	
				- This can be achived only using Micro-Service Based Application Architecture.
				- Achieve Production Releases without any down-time.
		
				Eg.: amazon/facebook/netflix
						
						
			www.amazon.com 
			
			Sign-Up 			- Micro-Service1 - Developer1 - Independently Code - Integrate for further testing --> Release for Prod Environments
			Sign-In 			- Micro-Service2 - Developer2 - Independently Code - Integrate for further testing --> Release for Prod Environments
			Search
			Add to Cart 
			Place the Order
			Make Payment 
			Confirm Order 
			Track 
			
			
			- Tools :
			
				- Jenkins / Azure Pipelines / Azure Artifacts / 
				- Docker / Kubernetes / ACS / ACR / AKS 
				
		
		- Continuous Monitoring::
		
			- It used to ensure high availability of Applications and the Infra-Structure.		
			- To ensure business continueity
			
			- Infra-Structure Monitoring 
			
				- Azure Monitors / Dynatrace
			
			- Application Monitoring 
		
				- DataDog / AppDynamics 
				
	DevOps Tools :::

		- Open-Source DevOps Tools:
			- Jenkins/GitHub/Docker/Kubernetes/Ansible/Terraform/Prometheus/Grafana
		
		- Managed Services: (SAAS)
		
			AZURE	:  AzBoards,AzRepos,AzPipelines,AzTest,AzArtifacts
			
			AWS 	:  AWS Developer Tools - CodeCommit,CodeBuild,CodePipeline, etc......
			
			GCP 	:  DevOps Servifces 
			
			
	Azure DevOps Services ::: Az-400 - Azure DevOps Certification Code.
	
		AzBoards,AzRepos,AzPipelines,AzTest,AzArtifacts
		

	Waterfall/AGILE/DevOps/DevSecOps/GitOps/AIOps/MLOps/SRE...
	
	
	DevOps Resource :
	
		DevOps Process 
		
		DevOps Tools 
		
		Core Concepts to be clear based on real-time scenarios
		
		Basic Scripting Knowledge :
			
			- Shell Scripting / *.yaml Scripting / *.python Scripting / groovy Scripting
			
			
	Azure DevOps Services :
	
		- Create Azure Account(Free Tier - 1 Month - $200)
		
			- Enable Parallel Build Request.
		
		- GitHub --> Source Code / Training Class_Notes 
		
		- DockerHub Account 
		
		
Next :

	Start with Azure DevOps Services - Azure Board



#######################
Day 2 : 6th April 2025
#######################	

	Working with Azure DevOps Services!
	
	Overview of All Azure DevOps Services 
	
	Create Azure Cloud Account 
	
	Continuous Development
	
	- Source Management using GitHub/Azure Repo.
	
	GIT / GITHUB : 
	
	
	Azure DevOps Services :
	
		Application Builds and Deployments :
		
		ALM Tool : Application LifeCycle Management Tool 
		
			- Used to track the end-to-end project activities.
			
			- Jira - Agile Projects 
	
	
	
		Azure Boards 
		
		Azure Repos 
		
		Azure Pipelines 
		
		Azure Test Plans 
		
		Azure Artifacts
	
	
	index.html 
	
	---
	-
	--
	-
	-
	-
	-
	
	save as index.html 
	
	Using VCS like github/git 
	
	index.html 
	
	---
	-
	--
	-
	-
	-
	-
	
	save as index.html 			===>	index.html_v1.0			==> Version Number/Tag/Commit_id
	
	index.html 
	
	---
	-
	--
	-
	-asdfsd
	-asdfasdfadsf
	-	adfasdf
	
	save as index.html 			===>	index.html_v1.1			==> Version Number/Tag/Commit_id		==> 	mywebapp.war_SNAP_SHOT_v1.1 
	
	save as index.html 			===>	index.html_v1.2			==> Version Number/Tag/Commit_id		==> 	mywebapp.war_SNAP_SHOT_v1.2 		
	
	save as index.html 			===>	index.html_v1.3			==> Version Number/Tag/Commit_id		==> 	mywebapp.war_SNAP_SHOT_v1.3
	                                                                                                    
	save as index.html 			===>	index.html_v1.4			==> Version Number/Tag/Commit_id	    ==> 	mywebapp.war_SNAP_SHOT_v1.4
	
	
	
	Container Images 
	
	Container Registry 		--> Used to version control/Manage the Application Container Iamges
	
		
	mywebapp.war_SNAP_SHOT_v1.1 				===>		mywebapp_image:v1.1
	
	mywebapp.war_SNAP_SHOT_v1.2 				===>		mywebapp_image:v1.2
		
	mywebapp.war_SNAP_SHOT_v1.3					===>		mywebapp_image:v1.3
		
	mywebapp.war_SNAP_SHOT_v1.4					===>		mywebapp_image:v1.4


	Containerization using Azure Container Services :
	
		ACS / ACR / AKS 
	
	
	
	
	DevOps Life Cycle :
	
	- Non-Containerized Application 
	
		1. Developer Created the Source Code 
		2. Commit the Changes to Source Code Repository (github/AzRepos)
		
	Using DevOps CICD Pipeline :
	
		1. SCM_Checkout --> Download the SourceCode from Source Code Repository to Build Environment
		2. Application Build (Compile the source code and create artifacts -  mywebapp.war)
		3. Unit Test 
		4. Promote the Application Artifacts to QA Environment
		5. Automated QA Testing (Testing Team)
		6. Promote the Application Artifacts to UAT Environment
		7. Automated/Manual UAT Testing (Done by the Business Users)
	
		8. Promote the Application Artifacts to Prod Environment
	
	
	- Containerized Applications : Docker & Kubernetes
	
		1. Developer Created the Source Code 
		2. Commit the Changes to Source Code Repository (github/AzRepos)
		
	Using DevOps CICD Pipeline :
	
		1. SCM_Checkout --> Download the SourceCode from Source Code Repository to Build Environment
		2. Application Build (Compile the source code and create artifacts -  mywebapp.war)
		2.1 Applications Container Image Build using ACS - mywebapp_image:v1.1
		2.2 Publish the Container Image to Container Registry using ACR
		3. Unit Test 
		4. Deploy the Application Container Images to QA Environment
		5. Automated QA Testing (Testing Team)
		6. Deploy the Application Container Images to UAT Environment
		7. Automated/Manual UAT Testing (Done by the Business Users)
	
		8. Deploy the Application Container Images to Prod Environment	
		
		
		
	Pre-requisities :
	
		- Create Azure Cloud Account 
		
			https://portal.azure.com/signin/index/	

				To create Azure Cloud Account :
				
					- Active Email_ID 
					
					- Active Mobile Number 
					
					- Active Credit/Debit Card(Enabled with International Transaction)	

			Free Account is eligible for 12 Months 
			
			$200 for initial 1 Month. 
			
			From 2nd Month, it be Pay-As-You-Go Model for some service.
			
			https://aex.dev.azure.com/			
			
		- Github Account 
		
			https://github.com/
		
		- DockerHub Account 
		
			https://hub.docker.com/
		
		- Install Visual Studio Code (IDE)

			https://code.visualstudio.com/download
			
			#Visual Studio 				# .Net Developers
			
			#Eclipse 					# Java Developers

		
		- Install git client in the local Machine 
	
			https://git-scm.com/downloads		
			
			open git bash terminal 
			
				$ git --version
		
		
		
		Azure DevOps Services :
		
			1. Create Azure DevOps Organization 
			2. Create Azure DevOps Project within the Organization
			3. Within the Project we can create create 
					Azure Boards, 
					Azure Repos, 
					Azure Pipelines, 
					Azure Test, 
					Azure Artifacts
					
					
		Create Azure DevOps Organization :
			
	Git/GitHub/AzRepos :::
	
	
	Source Code Management System: 
	
	Version Control System :
	
		- Is used version control the Source Code Changes --> (version number/tag/commit_id)
		- Is used to track the Changes 
		
	
	Types of Version Control System:

		Local Version Control System 

		Centralized Version Control System

		Distributed Version Control System: 
	
	
	
	
	Distributed Version Control System
	
		- GIT is the Open-Source Distributed VCS 
		- Is used version control the Source Code Changes --> (version number/tag/commit_id)
		- Is used to track the Changes 	
		- It is used to perform Parallel Development using Git Branching Techniques.
		
		- Using GIT Cli Command 
		
		
	GIT CLI commands :

		git push : push the latest changes from the local machine to remote git repository
		
		git pull : to download the latest changes from remote repo to local machine - keep the changes in-sync with the remote repo.
		

	Git Branches : 
		
		- It is used to perform Parallel Development without impacting others' changes.
		
		- Default Branch called (master/main)
			- It is considered as a production version of source code
		
	Git Branching Strategies :
	
		- Are used to maintain the integrity of the main/master branch
		
		
	Scenario 1 :
	
		Developer 
		
			Repository :
				
				master - c1,c2,c3
				
							c1,c2,c3,f1cm1,f1cm2			# Upon merging feature1 changes
				
					feature1 - c1,c2,c3
					
								- c1,c2,c3,f1cm1,f1cm2 -- merge to master 
								
								
	Scenario 2 :
	
		Developer 
		
			Repository :
				
				master - c1,c2,c3
				
							c1,c2,c3,c4			(c4 is upon merging changes from Developer_Branch)
				
					Developer_Branch : c1,c2,c3
					
							c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
				
						feature1 - c1,c2,c3
						
								c1,c2,c3,f1cm1,f1cm2,f1cm3
					
						feature2 - c1,c2,c3 
						
								c1,c2,c3,f2cm1,f2cm2,f2cm3
	
	
	Scenario 3 :
	
		Developer 
		
			Repository :
				
				master - c1,c2,c3
				
						c1,c2,c3,c4 				(c4 is upon merging changes from Integration_Branch)
				
					Integration_Branch - c1,c2,c3
					
							c1,c2,c3,Developer1_Changes,Developer2_Changes
				
						Developer1_Branch : c1,c2,c3
						
								c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
					
							feature1 - c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3
						
							feature2 - c1,c2,c3 
							
									c1,c2,c3,f2cm1,f2cm2,f2cm3	
		

						Developer2_Branch : c1,c2,c3
						
								c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
					
							feature1 - c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3
						
							feature2 - c1,c2,c3 
							
									c1,c2,c3,f2cm1,f2cm2,f2cm3		
		
	
	
	Scenario 4 :
	
		Developer 
		
			Repository :
				
				master - c1,c2,c3
				
						c1,c2,c3,c4 				(c4 is upon merging changes from Release_Branch)
				
				
					Release_Branch - c1,c2,c3
					
								c1,c2,c3,Team1_Changes,Team2_Changes			
					
				
						Integration_Branch - c1,c2,c3																# Team1 
						
								c1,c2,c3,Developer1_Changes,Developer2_Changes
					
							Developer1_Branch : c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
								feature1 - c1,c2,c3
								
										c1,c2,c3,f1cm1,f1cm2,f1cm3
							
								feature2 - c1,c2,c3 
								
										c1,c2,c3,f2cm1,f2cm2,f2cm3			

							Developer2_Branch : c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
								feature1 - c1,c2,c3
								
										c1,c2,c3,f1cm1,f1cm2,f1cm3
							
								feature2 - c1,c2,c3 
								
										c1,c2,c3,f2cm1,f2cm2,f2cm3		
			
				
						Integration_Branch - c1,c2,c3																# Team2
						
								c1,c2,c3,Developer1_Changes,Developer2_Changes
					
							Developer1_Branch : c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
								feature1 - c1,c2,c3
								
										c1,c2,c3,f1cm1,f1cm2,f1cm3
							
								feature2 - c1,c2,c3 
								
										c1,c2,c3,f2cm1,f2cm2,f2cm3			

							Developer2_Branch : c1,c2,c3
							
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
								feature1 - c1,c2,c3
								
										c1,c2,c3,f1cm1,f1cm2,f1cm3
							
								feature2 - c1,c2,c3 
								
										c1,c2,c3,f2cm1,f2cm2,f2cm3		
				
			
			
Next ::

	Azure Boards 
	Azure Repos 
	Azure Pipelines
			
